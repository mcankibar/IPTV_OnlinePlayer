@using NuGet.Packaging
@model IPTvOnlinePlayer.Models.Playlist.PlaylistListModel
@{
    ViewBag.Title = "Manage Your Playlist(s)";
    Layout = "_Layout";

}

<h1></h1>

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="d-flex align-items-end row">
                <div class="col-sm-7">
                    <div class="card-body">
                        <h2 class="card-title text-primary">@ViewData["Title"]</h2>
                        <p class="mb-4">
                            For an <span class="fw-bold">IPTV</span>, a <span class="fw-bold">"playlist"</span> refers to a watchable list of various media content such as television channels, movies or series.
                            This list is usually stored in a file format and used by the IPTV software. From this section you can manage your playlists.
                        </p>

                        <div class="col-lg-3 col-md-6">
                            <div class="mt-3">
                                <button
                                    class="btn btn-sm btn-outline-primary"
                                    type="button"
                                    data-bs-toggle="offcanvas"
                                    data-bs-target="#offcanvasEnd"
                                    aria-controls="offcanvasEnd">
                                    Explain More
                                </button>
                                <div
                                    class="offcanvas offcanvas-end"
                                    style="width: 650px"
                                    tabindex="-1"
                                    id="offcanvasEnd"
                                    aria-labelledby="offcanvasEndLabel">
                                    <div class="offcanvas-header">
                                        <h5 id="offcanvasEndLabel" class="offcanvas-title">What is Playlist?</h5>
                                        <button
                                            type="button"
                                            class="btn-close text-reset"
                                            data-bs-dismiss="offcanvas"
                                            aria-label="Close">
                                        </button>
                                    </div>
                                    <div class="offcanvas-body my-auto mx-0 flex-grow-0">
                                        <p><strong>"playlist"</strong> for IPTV refers to a watchable list of various media content, such as television channels, movies or series. This list is usually stored in a file format and used by IPTV software.</p>
                                        <p><strong>M3U file</strong> is one of the most widely used playlist file formats. M3U stands for "MP3 URL" and although it was originally used to play music files, it has now been extended to support a wide range of media formats in IPTV services. An M3U file contains URLs of media sources, usually streamed over the internet.</p>
                                        <h3>M3U File Structure</h3>
                                        <p>The structure of the M3U file is simple and usually each line contains the URL of a media source or a file path. Optionally, it can be expanded with <code>#EXTM3U</code> headers to include more information. These headers can include additional information such as channel information, playback time and title.</p>
                                        <h3>Sample M3U File</h3>
                                        <pre>
                                            #EXTM3U
                                            #EXTINF:-1, Channel Name - Program Name
                                            http://example.com/stream.m3u8
                                                </pre>
                                        <p>Here, the <code>#EXTINF:-1,</code> tag indicates that the duration of the next URL is unknown (usually for live broadcasts) and contains a human-readable description of <em>Channel Name - Program Name</em>. The URL indicates the address where the media stream is located. M3U files are a convenient way to personalize and manage your IPTV viewing experience.</p>
                                        <h3>Where Can i Find It?</h3>
                                        <p>You can find them among those shared for free on the internet. Or you can download your customized file from the IPTv provider you purchased it from.</p>
                                        <button
                                            type="button"
                                            class="btn btn-outline-secondary d-grid w-100"
                                            data-bs-dismiss="offcanvas">
                                            Close
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-5 text-center text-sm-left">
                    <div class="card-body pb-0 px-0 px-md-4">
                        <img
                            src="~/assets/img/illustrations/man-with-laptop-light.png"
                            height="140"
                            alt="View Badge User"
                            data-app-dark-img="illustrations/man-with-laptop-dark.png"
                            data-app-light-img="illustrations/man-with-laptop-light.png"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<hr class="my-5"/>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-6">
                <h3>Playlist(s)</h3>
            </div>
            <div class="col-6">
                <button
                    type="button"
                    class="btn btn-primary float-end"
                    data-bs-toggle="modal"
                    data-bs-target="#backDropModal">
                    Add New Playlist
                </button>
            </div>
        </div>
    </div>


    <div class="table-responsive text-nowrap">
        <table class="table table-hover">
            <thead>
            <tr>
                <th>Name</th>
                <th>Category Count</th>
                <th>Media Count</th>
                <th>Created On</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody class="table-border-bottom-0">
            @if (Model.Playlists.Any())
            {
                foreach (var playlist in Model.Playlists)
                {
                    <tr>
                        <td>
                            <strong>@playlist.Name</strong>
                        </td>
                        <td>@playlist.CategoryCount</td>
                        <td>@playlist.MediaItemCount</td>
                        <td>@playlist.CreatedOnUtc.ToShortDateString()</td>
                        <td>
                            <a class="dropdown-item" href="@Url.Action("Details", "Playlist", new { id = playlist.Id })">
                                <i class="fa-solid fa-eye me-1"></i> Details
                            </a
                            >
                            <a class="dropdown-item" href="javascript:void(0);" onclick="confirmDelete(@playlist.Id)">
                                <i class="bx bx-trash me-1"></i> Delete
                            </a
                            >
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr style="height: 75px">
                    <td colspan="5" class="text-center">You don't have a defined playlist, or we lost it</td>
                </tr>
            }

            </tbody>
        </table>
    </div>
</div>

<div class="col-lg-4 col-md-3">
    <div class="mt-3">
        <!-- Modal -->
        <div class="modal fade" id="backDropModal" data-bs-backdrop="static" tabindex="-1">
            <div class="modal-dialog" id="add-playlist-form-modal">
                <div id="create-modal">
                    @await Html.PartialAsync("Create", new IPTvOnlinePlayer.Models.Playlist.PlaylistCreateModel())
                </div>
                <div id="wait-modal" style="display: none">
                    <form class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="backDropModalTitle">Please Wait...</h5>
                        </div>
                        <div class="modal-body">
                            <p>This may take a little while. We are trying to optimize and speed it up, but at this stage we recommend you have a coffee.</p>
                            <div class="col-md">
                                <div class="demo-inline-spacing" style="text-align: center">
                                    <div class="spinner-border spinner-border-lg text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="col-lg-4 col-md-3">
    <div class="mt-3">
        <!-- Modal -->
        <div class="modal fade" id="delete-backDropModal" data-bs-backdrop="static" tabindex="-1">
            <div class="modal-dialog" id="delete-playlist-form-modal">
                <div id="delete-wait-modal">
                    <form class="modal-content">
                        <h5 class="modal-title" id="delete-backDropModalTitle">Please Wait...</h5>
                        <div class="modal-body">
                            <p>This may take a little while. We are trying to optimize and speed it up, but at this stage we recommend you have a coffee.</p>
                            <div class="col-md">
                                <div class="demo-inline-spacing" style="text-align: center">
                                    <div class="spinner-border spinner-border-lg text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function confirmDelete(id) {
        if (confirm("Are you sure you want to delete this playlist?")) {
            deletePlaylist(id);
        } else {
            return false;
        }
    }

    function deletePlaylist(id) {
         $('#delete-backDropModal').modal('show');
         
        $.ajax({
            url: `/Playlist/Delete/${id}`,
            type: 'POST',
            success: function(response) {
                $('#delete-backDropModal').modal('hide');
                location.reload();
            },
            error: function(xhr, status, error) {
                alert("An error occurred while deleting the playlist.");
            }
        });
    }
</script>


@section Scripts {
    <script>
        $(document).ready(function () {
                setMenuActive('playlist-management');
        });
        
         function handleSubmit(form) {
             $("#create-modal").hide();
                $("#wait-modal").show();
                event.preventDefault();
        
                $.ajax({
                    type: form.method,
                    url: form.action,
                    data: new FormData(form),
                    contentType: false,
                    processData: false,
                    success: function(data) {
                        $('#create-modal').html(data);
                        $("#create-modal").show();
                        $("#wait-modal").hide();
                    },
                    error: function(xhr, status, error) {
                    }
                });
        
                return false; 
            }
    </script>
}